//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AScript.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, LBAGG=29, SELECT=30, GROUPBY=31, 
		CUBE=32, ROLLUP=33, FILTER=34, SORT=35, JOIN=36, ORDERBY=37, CONDITIONOPERATOR=38, 
		DATEFUNCTION=39, DATEUDF=40, STRINGUDF=41, NUMBERUDF=42, JOINTYPE=43, 
		DECLARTYPE=44, AGGRE=45, DATATYPE=46, WEEK=47, OPER=48, SPLITER=49, INT=50, 
		DOUBLE=51, WORD=52, LFSBRKT=53, RFSBRKT=54, LFBRKT=55, RFBRKT=56, DOT=57, 
		STRING_LITERAL=58, AGGGROUP=59, SAYS=60, EOS=61, TEXT=62, WHITESPACE=63, 
		WS=64;
	public const int
		RULE_statement = 0, RULE_line = 1, RULE_var = 2, RULE_strfield = 3, RULE_strvalue = 4, 
		RULE_strreplacevalue = 5, RULE_dr = 6, RULE_ns = 7, RULE_nsp = 8, RULE_imptext = 9, 
		RULE_imp = 10, RULE_nullreplace = 11, RULE_stringreplace = 12, RULE_nadrop = 13, 
		RULE_data = 14, RULE_dataformat = 15, RULE_comparedate = 16, RULE_adddate = 17, 
		RULE_datediff = 18, RULE_monthadd = 19, RULE_monthbetween = 20, RULE_next = 21, 
		RULE_formatingstring = 22, RULE_todate = 23, RULE_totime = 24, RULE_dateformat = 25, 
		RULE_datefunction = 26, RULE_dateadvancefunction = 27, RULE_stringfunction = 28, 
		RULE_stringformat = 29, RULE_numberfunction = 30, RULE_numberformat = 31, 
		RULE_strings = 32, RULE_stringltr = 33, RULE_fields = 34, RULE_sel = 35, 
		RULE_gp = 36, RULE_eos = 37, RULE_dataframe = 38, RULE_flt = 39, RULE_param = 40, 
		RULE_todata = 41, RULE_dataitem = 42, RULE_load = 43, RULE_export = 44, 
		RULE_sort = 45, RULE_dist = 46, RULE_isall = 47, RULE_limit = 48, RULE_intersect = 49, 
		RULE_except = 50, RULE_union = 51, RULE_drop = 52, RULE_newcase = 53, 
		RULE_joincase = 54, RULE_multicase = 55, RULE_multiwhen = 56, RULE_newcolumn = 57, 
		RULE_context = 58, RULE_conlit = 59, RULE_concatstate = 60, RULE_concatcolumn = 61, 
		RULE_withcolumn = 62, RULE_path = 63, RULE_cube = 64, RULE_rollup = 65, 
		RULE_select = 66, RULE_groupby = 67, RULE_filtercondition = 68, RULE_sortstatement = 69, 
		RULE_join = 70, RULE_multijoin = 71, RULE_relation = 72, RULE_aggtype = 73, 
		RULE_joindata = 74, RULE_joinfield = 75, RULE_joinedfield = 76, RULE_joineddata = 77, 
		RULE_declare = 78, RULE_datafields = 79, RULE_order = 80, RULE_condition = 81, 
		RULE_agg = 82, RULE_selectsort = 83, RULE_limitvalue = 84, RULE_schema = 85, 
		RULE_schemaname = 86;
	public static readonly string[] ruleNames = {
		"statement", "line", "var", "strfield", "strvalue", "strreplacevalue", 
		"dr", "ns", "nsp", "imptext", "imp", "nullreplace", "stringreplace", "nadrop", 
		"data", "dataformat", "comparedate", "adddate", "datediff", "monthadd", 
		"monthbetween", "next", "formatingstring", "todate", "totime", "dateformat", 
		"datefunction", "dateadvancefunction", "stringfunction", "stringformat", 
		"numberfunction", "numberformat", "strings", "stringltr", "fields", "sel", 
		"gp", "eos", "dataframe", "flt", "param", "todata", "dataitem", "load", 
		"export", "sort", "dist", "isall", "limit", "intersect", "except", "union", 
		"drop", "newcase", "joincase", "multicase", "multiwhen", "newcolumn", 
		"context", "conlit", "concatstate", "concatcolumn", "withcolumn", "path", 
		"cube", "rollup", "select", "groupby", "filtercondition", "sortstatement", 
		"join", "multijoin", "relation", "aggtype", "joindata", "joinfield", "joinedfield", 
		"joineddata", "declare", "datafields", "order", "condition", "agg", "selectsort", 
		"limitvalue", "schema", "schemaname"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "'dataroot'", "'namespace'", "'namespaceparam'", "','", 
		"'import'", "'nullrep'", "'textrep'", "'nulldrop'", "'@'", "'#'", "'todc'", 
		"'load'", "'fields'", "'export'", "'distinct'", "'all'", "'limit'", "'intersect'", 
		"'except'", "'union'", "'drop'", "'==='", "'when'", "'new'", "'='", "'table'", 
		"'Agg'", "'select'", "'groupby'", "'cube'", "'rollup'", "'search'", "'sortby'", 
		"'join'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "LBAGG", "SELECT", "GROUPBY", "CUBE", "ROLLUP", 
		"FILTER", "SORT", "JOIN", "ORDERBY", "CONDITIONOPERATOR", "DATEFUNCTION", 
		"DATEUDF", "STRINGUDF", "NUMBERUDF", "JOINTYPE", "DECLARTYPE", "AGGRE", 
		"DATATYPE", "WEEK", "OPER", "SPLITER", "INT", "DOUBLE", "WORD", "LFSBRKT", 
		"RFSBRKT", "LFBRKT", "RFBRKT", "DOT", "STRING_LITERAL", "AGGGROUP", "SAYS", 
		"EOS", "TEXT", "WHITESPACE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << DECLARTYPE) | (1L << WORD))) != 0)) {
				{
				{
				State = 174; line();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}
	public List<string> Errors { get; set; }
	public override void NotifyErrorListeners(IToken offendingToken, string msg, RecognitionException e)
	{
		if (Errors == null)
		{
			Errors = new List<string>();
		}
		Errors.Add("Error:" + msg + " at " + offendingToken.Line);
		base.NotifyErrorListeners(offendingToken, msg, e);
	}
	public partial class LineContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public SelContext sel() {
			return GetRuleContext<SelContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public GpContext gp() {
			return GetRuleContext<GpContext>(0);
		}
		public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		public ITerminalNode JOIN() { return GetToken(AScriptParser.JOIN, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public JoinContext join() {
			return GetRuleContext<JoinContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode CUBE() { return GetToken(AScriptParser.CUBE, 0); }
		public CubeContext cube() {
			return GetRuleContext<CubeContext>(0);
		}
		public ITerminalNode ROLLUP() { return GetToken(AScriptParser.ROLLUP, 0); }
		public RollupContext rollup() {
			return GetRuleContext<RollupContext>(0);
		}
		public DistContext dist() {
			return GetRuleContext<DistContext>(0);
		}
		public LimitContext limit() {
			return GetRuleContext<LimitContext>(0);
		}
		public UnionContext union() {
			return GetRuleContext<UnionContext>(0);
		}
		public IntersectContext intersect() {
			return GetRuleContext<IntersectContext>(0);
		}
		public ExceptContext except() {
			return GetRuleContext<ExceptContext>(0);
		}
		public DropContext drop() {
			return GetRuleContext<DropContext>(0);
		}
		public WithcolumnContext withcolumn() {
			return GetRuleContext<WithcolumnContext>(0);
		}
		public LoadContext load() {
			return GetRuleContext<LoadContext>(0);
		}
		public FilterconditionContext filtercondition() {
			return GetRuleContext<FilterconditionContext>(0);
		}
		public SortstatementContext sortstatement() {
			return GetRuleContext<SortstatementContext>(0);
		}
		public ExportContext export() {
			return GetRuleContext<ExportContext>(0);
		}
		public NullreplaceContext nullreplace() {
			return GetRuleContext<NullreplaceContext>(0);
		}
		public StringreplaceContext stringreplace() {
			return GetRuleContext<StringreplaceContext>(0);
		}
		public NadropContext nadrop() {
			return GetRuleContext<NadropContext>(0);
		}
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public TodataContext todata() {
			return GetRuleContext<TodataContext>(0);
		}
		public DrContext dr() {
			return GetRuleContext<DrContext>(0);
		}
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public NsContext ns() {
			return GetRuleContext<NsContext>(0);
		}
		public NspContext nsp() {
			return GetRuleContext<NspContext>(0);
		}
		public ImpContext imp() {
			return GetRuleContext<ImpContext>(0);
		}
		public ImptextContext imptext() {
			return GetRuleContext<ImptextContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; var();
				State = 181; Match(T__0);
				State = 182; data();
				State = 183; Match(DOT);
				State = 184; sel();
				State = 185; select();
				State = 186; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; var();
				State = 189; Match(T__0);
				State = 190; data();
				State = 191; Match(DOT);
				State = 192; gp();
				State = 193; groupby();
				State = 194; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; var();
				State = 197; Match(T__0);
				State = 198; data();
				State = 199; Match(DOT);
				State = 200; Match(JOIN);
				State = 201; Match(LFBRKT);
				State = 202; join();
				State = 203; Match(RFBRKT);
				State = 204; Match(T__1);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 206; var();
				State = 207; Match(T__0);
				State = 208; data();
				State = 209; Match(DOT);
				State = 210; Match(CUBE);
				State = 211; cube();
				State = 212; Match(T__1);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214; var();
				State = 215; Match(T__0);
				State = 216; data();
				State = 217; Match(DOT);
				State = 218; Match(ROLLUP);
				State = 219; rollup();
				State = 220; Match(T__1);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 222; var();
				State = 223; Match(T__0);
				State = 224; data();
				State = 225; Match(DOT);
				State = 226; dist();
				State = 227; Match(T__1);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 229; var();
				State = 230; Match(T__0);
				State = 231; data();
				State = 232; Match(DOT);
				State = 233; limit();
				State = 234; Match(T__1);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 236; var();
				State = 237; Match(T__0);
				State = 238; data();
				State = 239; Match(DOT);
				State = 240; union();
				State = 241; Match(T__1);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243; var();
				State = 244; Match(T__0);
				State = 245; data();
				State = 246; Match(DOT);
				State = 247; intersect();
				State = 248; Match(T__1);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 250; var();
				State = 251; Match(T__0);
				State = 252; data();
				State = 253; Match(DOT);
				State = 254; except();
				State = 255; Match(T__1);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 257; var();
				State = 258; Match(T__0);
				State = 259; data();
				State = 260; Match(DOT);
				State = 261; drop();
				State = 262; Match(T__1);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 264; var();
				State = 265; Match(T__0);
				State = 266; data();
				State = 267; Match(DOT);
				State = 268; withcolumn();
				State = 269; Match(T__1);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 271; var();
				State = 272; Match(T__0);
				State = 273; load();
				State = 274; Match(T__1);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 276; var();
				State = 277; Match(T__0);
				State = 278; data();
				State = 279; filtercondition();
				State = 280; Match(T__1);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 282; var();
				State = 283; Match(T__0);
				State = 284; data();
				State = 285; sortstatement();
				State = 286; Match(T__1);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 288; var();
				State = 289; Match(T__0);
				State = 290; data();
				State = 291; Match(DOT);
				State = 292; export();
				State = 293; Match(T__1);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 295; var();
				State = 296; Match(T__0);
				State = 297; data();
				State = 298; Match(DOT);
				State = 299; nullreplace();
				State = 300; Match(T__1);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 302; var();
				State = 303; Match(T__0);
				State = 304; data();
				State = 305; Match(DOT);
				State = 306; stringreplace();
				State = 307; Match(T__1);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 309; var();
				State = 310; Match(T__0);
				State = 311; data();
				State = 312; Match(DOT);
				State = 313; nadrop();
				State = 314; Match(T__1);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 316; declare();
				State = 317; Match(T__0);
				State = 318; var();
				State = 319; Match(T__0);
				State = 320; param();
				State = 321; Match(T__1);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 323; declare();
				State = 324; Match(T__0);
				State = 325; var();
				State = 326; Match(T__0);
				State = 327; Match(TEXT);
				State = 328; Match(T__1);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 330; declare();
				State = 331; Match(T__0);
				State = 332; var();
				State = 333; Match(T__0);
				State = 334; todata();
				State = 335; Match(T__1);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 337; dr();
				State = 338; Match(T__0);
				State = 339; path();
				State = 340; Match(T__1);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 342; ns();
				State = 343; Match(T__0);
				State = 344; Match(TEXT);
				State = 345; Match(T__1);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 347; nsp();
				State = 348; Match(T__0);
				State = 349; param();
				State = 350; Match(T__1);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 352; imp();
				State = 353; Match(T__0);
				State = 354; imptext();
				State = 355; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 4, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfieldContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public StrfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStrfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStrfield(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfieldContext strfield() {
		StrfieldContext _localctx = new StrfieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_strfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrvalueContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public StrvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStrvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStrvalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrvalueContext strvalue() {
		StrvalueContext _localctx = new StrvalueContext(Context, State);
		EnterRule(_localctx, 8, RULE_strvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrreplacevalueContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public StrreplacevalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strreplacevalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStrreplacevalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStrreplacevalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrreplacevalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrreplacevalueContext strreplacevalue() {
		StrreplacevalueContext _localctx = new StrreplacevalueContext(Context, State);
		EnterRule(_localctx, 10, RULE_strreplacevalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrContext : ParserRuleContext {
		public DrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrContext dr() {
		DrContext _localctx = new DrContext(Context, State);
		EnterRule(_localctx, 12, RULE_dr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NsContext : ParserRuleContext {
		public NsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NsContext ns() {
		NsContext _localctx = new NsContext(Context, State);
		EnterRule(_localctx, 14, RULE_ns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NspContext : ParserRuleContext {
		public NspContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nsp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNsp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNsp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNsp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NspContext nsp() {
		NspContext _localctx = new NspContext(Context, State);
		EnterRule(_localctx, 16, RULE_nsp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImptextContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(AScriptParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(AScriptParser.TEXT, i);
		}
		public ImptextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imptext; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterImptext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitImptext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImptext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImptextContext imptext() {
		ImptextContext _localctx = new ImptextContext(Context, State);
		EnterRule(_localctx, 18, RULE_imptext);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 373; Match(TEXT);
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 374; Match(T__5);
				{
				State = 375; Match(TEXT);
				}
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpContext : ParserRuleContext {
		public ImpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpContext imp() {
		ImpContext _localctx = new ImpContext(Context, State);
		EnterRule(_localctx, 20, RULE_imp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullreplaceContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public StrfieldContext strfield() {
			return GetRuleContext<StrfieldContext>(0);
		}
		public StrvalueContext strvalue() {
			return GetRuleContext<StrvalueContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public NullreplaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullreplace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNullreplace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNullreplace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullreplace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullreplaceContext nullreplace() {
		NullreplaceContext _localctx = new NullreplaceContext(Context, State);
		EnterRule(_localctx, 22, RULE_nullreplace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(T__7);
			State = 384; Match(LFBRKT);
			State = 385; strfield();
			State = 386; Match(T__5);
			State = 387; strvalue();
			State = 388; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringreplaceContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public StrfieldContext strfield() {
			return GetRuleContext<StrfieldContext>(0);
		}
		public StrvalueContext strvalue() {
			return GetRuleContext<StrvalueContext>(0);
		}
		public StrreplacevalueContext strreplacevalue() {
			return GetRuleContext<StrreplacevalueContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public StringreplaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringreplace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStringreplace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStringreplace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringreplace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringreplaceContext stringreplace() {
		StringreplaceContext _localctx = new StringreplaceContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringreplace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T__8);
			State = 391; Match(LFBRKT);
			State = 392; strfield();
			State = 393; Match(T__5);
			State = 394; strvalue();
			State = 395; Match(T__5);
			State = 396; strreplacevalue();
			State = 397; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NadropContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public NadropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nadrop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNadrop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNadrop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNadrop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NadropContext nadrop() {
		NadropContext _localctx = new NadropContext(Context, State);
		EnterRule(_localctx, 26, RULE_nadrop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(T__9);
			State = 400; Match(LFBRKT);
			State = 401; Match(TEXT);
			State = 402; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public DataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataContext data() {
		DataContext _localctx = new DataContext(Context, State);
		EnterRule(_localctx, 28, RULE_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataformatContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode INT() { return GetToken(AScriptParser.INT, 0); }
		public DataformatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataformat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDataformat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDataformat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataformat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataformatContext dataformat() {
		DataformatContext _localctx = new DataformatContext(Context, State);
		EnterRule(_localctx, 30, RULE_dataformat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(WORD);
			State = 407; Match(T__5);
			State = 408; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparedateContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ComparedateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparedate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterComparedate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitComparedate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparedate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparedateContext comparedate() {
		ComparedateContext _localctx = new ComparedateContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparedate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdddateContext : ParserRuleContext {
		public DataformatContext dataformat() {
			return GetRuleContext<DataformatContext>(0);
		}
		public AdddateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adddate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterAdddate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitAdddate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdddate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdddateContext adddate() {
		AdddateContext _localctx = new AdddateContext(Context, State);
		EnterRule(_localctx, 34, RULE_adddate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; dataformat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatediffContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ComparedateContext comparedate() {
			return GetRuleContext<ComparedateContext>(0);
		}
		public DatediffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datediff; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDatediff(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDatediff(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatediff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatediffContext datediff() {
		DatediffContext _localctx = new DatediffContext(Context, State);
		EnterRule(_localctx, 36, RULE_datediff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(WORD);
			{
			State = 415; Match(T__5);
			State = 416; comparedate();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthaddContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode INT() { return GetToken(AScriptParser.INT, 0); }
		public MonthaddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthadd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterMonthadd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitMonthadd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthadd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthaddContext monthadd() {
		MonthaddContext _localctx = new MonthaddContext(Context, State);
		EnterRule(_localctx, 38, RULE_monthadd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(WORD);
			State = 419; Match(T__5);
			State = 420; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthbetweenContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ComparedateContext comparedate() {
			return GetRuleContext<ComparedateContext>(0);
		}
		public MonthbetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthbetween; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterMonthbetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitMonthbetween(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthbetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthbetweenContext monthbetween() {
		MonthbetweenContext _localctx = new MonthbetweenContext(Context, State);
		EnterRule(_localctx, 40, RULE_monthbetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(WORD);
			{
			State = 423; Match(T__5);
			State = 424; comparedate();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode WEEK() { return GetToken(AScriptParser.WEEK, 0); }
		public NextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextContext next() {
		NextContext _localctx = new NextContext(Context, State);
		EnterRule(_localctx, 42, RULE_next);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(WORD);
			{
			State = 427; Match(T__5);
			State = 428; Match(WEEK);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatingstringContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public FormatingstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatingstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterFormatingstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitFormatingstring(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatingstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatingstringContext formatingstring() {
		FormatingstringContext _localctx = new FormatingstringContext(Context, State);
		EnterRule(_localctx, 44, RULE_formatingstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TodateContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public TodateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_todate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterTodate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitTodate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTodate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TodateContext todate() {
		TodateContext _localctx = new TodateContext(Context, State);
		EnterRule(_localctx, 46, RULE_todate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(WORD);
			{
			State = 433; Match(T__5);
			State = 434; Match(TEXT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotimeContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public TotimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterTotime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitTotime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotimeContext totime() {
		TotimeContext _localctx = new TotimeContext(Context, State);
		EnterRule(_localctx, 48, RULE_totime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(WORD);
			{
			State = 437; Match(T__5);
			State = 438; Match(TEXT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateformatContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public FormatingstringContext formatingstring() {
			return GetRuleContext<FormatingstringContext>(0);
		}
		public DateformatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateformat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDateformat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDateformat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateformat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateformatContext dateformat() {
		DateformatContext _localctx = new DateformatContext(Context, State);
		EnterRule(_localctx, 50, RULE_dateformat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(WORD);
			{
			State = 441; Match(T__5);
			State = 442; formatingstring();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatefunctionContext : ParserRuleContext {
		public ITerminalNode DATEFUNCTION() { return GetToken(AScriptParser.DATEFUNCTION, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public DatefunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datefunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDatefunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDatefunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatefunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatefunctionContext datefunction() {
		DatefunctionContext _localctx = new DatefunctionContext(Context, State);
		EnterRule(_localctx, 52, RULE_datefunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(DATEFUNCTION);
			State = 445; Match(LFBRKT);
			State = 446; Match(WORD);
			State = 447; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateadvancefunctionContext : ParserRuleContext {
		public ITerminalNode DATEUDF() { return GetToken(AScriptParser.DATEUDF, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public MonthaddContext monthadd() {
			return GetRuleContext<MonthaddContext>(0);
		}
		public AdddateContext adddate() {
			return GetRuleContext<AdddateContext>(0);
		}
		public MonthbetweenContext monthbetween() {
			return GetRuleContext<MonthbetweenContext>(0);
		}
		public DatediffContext datediff() {
			return GetRuleContext<DatediffContext>(0);
		}
		public NextContext next() {
			return GetRuleContext<NextContext>(0);
		}
		public DateformatContext dateformat() {
			return GetRuleContext<DateformatContext>(0);
		}
		public TodateContext todate() {
			return GetRuleContext<TodateContext>(0);
		}
		public TotimeContext totime() {
			return GetRuleContext<TotimeContext>(0);
		}
		public DateadvancefunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateadvancefunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDateadvancefunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDateadvancefunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateadvancefunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateadvancefunctionContext dateadvancefunction() {
		DateadvancefunctionContext _localctx = new DateadvancefunctionContext(Context, State);
		EnterRule(_localctx, 54, RULE_dateadvancefunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 449; Match(DATEUDF);
			State = 450; Match(LFBRKT);
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 451; monthadd();
				}
				break;
			case 2:
				{
				State = 452; adddate();
				}
				break;
			case 3:
				{
				State = 453; monthbetween();
				}
				break;
			case 4:
				{
				State = 454; datediff();
				}
				break;
			case 5:
				{
				State = 455; next();
				}
				break;
			case 6:
				{
				State = 456; dateformat();
				}
				break;
			case 7:
				{
				State = 457; todate();
				}
				break;
			case 8:
				{
				State = 458; totime();
				}
				break;
			}
			State = 461; Match(RFBRKT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringfunctionContext : ParserRuleContext {
		public ITerminalNode STRINGUDF() { return GetToken(AScriptParser.STRINGUDF, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public StringfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStringfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStringfunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringfunctionContext stringfunction() {
		StringfunctionContext _localctx = new StringfunctionContext(Context, State);
		EnterRule(_localctx, 56, RULE_stringfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(STRINGUDF);
			State = 464; Match(LFBRKT);
			State = 465; Match(WORD);
			State = 466; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringformatContext : ParserRuleContext {
		public ITerminalNode STRINGUDF() { return GetToken(AScriptParser.STRINGUDF, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public StringformatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringformat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStringformat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStringformat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringformat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringformatContext stringformat() {
		StringformatContext _localctx = new StringformatContext(Context, State);
		EnterRule(_localctx, 58, RULE_stringformat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(STRINGUDF);
			State = 469; Match(LFBRKT);
			State = 470; Match(TEXT);
			{
			State = 471; Match(T__5);
			State = 472; Match(WORD);
			}
			State = 474; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberfunctionContext : ParserRuleContext {
		public ITerminalNode NUMBERUDF() { return GetToken(AScriptParser.NUMBERUDF, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public NumberfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNumberfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNumberfunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberfunctionContext numberfunction() {
		NumberfunctionContext _localctx = new NumberfunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_numberfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 476; Match(NUMBERUDF);
			State = 477; Match(LFBRKT);
			State = 478; Match(WORD);
			State = 479; Match(RFBRKT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberformatContext : ParserRuleContext {
		public ITerminalNode NUMBERUDF() { return GetToken(AScriptParser.NUMBERUDF, 0); }
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode INT() { return GetToken(AScriptParser.INT, 0); }
		public NumberformatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberformat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNumberformat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNumberformat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberformat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberformatContext numberformat() {
		NumberformatContext _localctx = new NumberformatContext(Context, State);
		EnterRule(_localctx, 62, RULE_numberformat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(NUMBERUDF);
			State = 482; Match(LFBRKT);
			State = 483; Match(WORD);
			{
			State = 484; Match(T__5);
			State = 485; Match(INT);
			}
			State = 487; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AScriptParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AScriptParser.WORD, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 64, RULE_strings);
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489; Match(WORD);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 490; Match(WORD);
				State = 491; Match(T__10);
				State = 492; Match(WORD);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringltrContext : ParserRuleContext {
		public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		public DatefunctionContext datefunction() {
			return GetRuleContext<DatefunctionContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public DateadvancefunctionContext dateadvancefunction() {
			return GetRuleContext<DateadvancefunctionContext>(0);
		}
		public StringfunctionContext stringfunction() {
			return GetRuleContext<StringfunctionContext>(0);
		}
		public StringformatContext stringformat() {
			return GetRuleContext<StringformatContext>(0);
		}
		public NumberfunctionContext numberfunction() {
			return GetRuleContext<NumberfunctionContext>(0);
		}
		public NumberformatContext numberformat() {
			return GetRuleContext<NumberformatContext>(0);
		}
		public StringltrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringltr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterStringltr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitStringltr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringltr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringltrContext stringltr() {
		StringltrContext _localctx = new StringltrContext(Context, State);
		EnterRule(_localctx, 66, RULE_stringltr);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495; strings();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 496; datefunction();
				State = 497; Match(T__10);
				State = 498; Match(WORD);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 500; dateadvancefunction();
				State = 501; Match(T__10);
				State = 502; Match(WORD);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 504; stringfunction();
				State = 505; Match(T__10);
				State = 506; Match(WORD);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 508; stringformat();
				State = 509; Match(T__10);
				State = 510; Match(WORD);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 512; numberfunction();
				State = 513; Match(T__10);
				State = 514; Match(WORD);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 516; numberformat();
				State = 517; Match(T__10);
				State = 518; Match(WORD);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public StringltrContext[] stringltr() {
			return GetRuleContexts<StringltrContext>();
		}
		public StringltrContext stringltr(int i) {
			return GetRuleContext<StringltrContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 68, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; stringltr();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 523; Match(T__5);
				State = 524; stringltr();
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(AScriptParser.SELECT, 0); }
		public SelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelContext sel() {
		SelContext _localctx = new SelContext(Context, State);
		EnterRule(_localctx, 70, RULE_sel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GpContext : ParserRuleContext {
		public ITerminalNode GROUPBY() { return GetToken(AScriptParser.GROUPBY, 0); }
		public GpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterGp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitGp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GpContext gp() {
		GpContext _localctx = new GpContext(Context, State);
		EnterRule(_localctx, 72, RULE_gp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(GROUPBY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode EOS() { return GetToken(AScriptParser.EOS, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 74, RULE_eos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataframeContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public DataframeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataframe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDataframe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDataframe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataframe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataframeContext dataframe() {
		DataframeContext _localctx = new DataframeContext(Context, State);
		EnterRule(_localctx, 76, RULE_dataframe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FltContext : ParserRuleContext {
		public ITerminalNode FILTER() { return GetToken(AScriptParser.FILTER, 0); }
		public FltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterFlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitFlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FltContext flt() {
		FltContext _localctx = new FltContext(Context, State);
		EnterRule(_localctx, 78, RULE_flt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(FILTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 80, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(T__11);
			State = 541; Match(WORD);
			State = 542; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TodataContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public DataitemContext dataitem() {
			return GetRuleContext<DataitemContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public TodataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_todata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterTodata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitTodata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTodata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TodataContext todata() {
		TodataContext _localctx = new TodataContext(Context, State);
		EnterRule(_localctx, 82, RULE_todata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(T__12);
			State = 545; Match(LFBRKT);
			State = 546; dataitem();
			State = 547; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataitemContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public DataitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDataitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDataitem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataitem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataitemContext dataitem() {
		DataitemContext _localctx = new DataitemContext(Context, State);
		EnterRule(_localctx, 84, RULE_dataitem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AScriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AScriptParser.DOT, i);
		}
		public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		public SchemanameContext schemaname() {
			return GetRuleContext<SchemanameContext>(0);
		}
		public DatafieldsContext datafields() {
			return GetRuleContext<DatafieldsContext>(0);
		}
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterLoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitLoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 86, RULE_load);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(T__13);
			State = 552; Match(LFBRKT);
			State = 553; path();
			State = 554; Match(RFBRKT);
			State = 555; Match(DOT);
			State = 556; schema();
			State = 557; Match(LFBRKT);
			State = 558; schemaname();
			State = 559; Match(RFBRKT);
			State = 560; Match(DOT);
			State = 561; Match(T__14);
			State = 562; Match(LFBRKT);
			State = 563; datafields();
			State = 564; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ExportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterExport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitExport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportContext export() {
		ExportContext _localctx = new ExportContext(Context, State);
		EnterRule(_localctx, 88, RULE_export);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(T__15);
			State = 567; Match(LFBRKT);
			State = 568; path();
			State = 569; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortContext : ParserRuleContext {
		public ITerminalNode SORT() { return GetToken(AScriptParser.SORT, 0); }
		public SortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortContext sort() {
		SortContext _localctx = new SortContext(Context, State);
		EnterRule(_localctx, 90, RULE_sort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(SORT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistContext : ParserRuleContext {
		public DistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistContext dist() {
		DistContext _localctx = new DistContext(Context, State);
		EnterRule(_localctx, 92, RULE_dist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsallContext : ParserRuleContext {
		public IsallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterIsall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitIsall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsallContext isall() {
		IsallContext _localctx = new IsallContext(Context, State);
		EnterRule(_localctx, 94, RULE_isall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public LimitvalueContext limitvalue() {
			return GetRuleContext<LimitvalueContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public LimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitLimit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitContext limit() {
		LimitContext _localctx = new LimitContext(Context, State);
		EnterRule(_localctx, 96, RULE_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(T__18);
			State = 578; Match(LFBRKT);
			State = 579; limitvalue();
			State = 580; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public IsallContext isall() {
			return GetRuleContext<IsallContext>(0);
		}
		public IntersectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterIntersect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitIntersect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntersectContext intersect() {
		IntersectContext _localctx = new IntersectContext(Context, State);
		EnterRule(_localctx, 98, RULE_intersect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; Match(T__19);
			State = 583; Match(LFBRKT);
			State = 584; data();
			State = 585; Match(RFBRKT);
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 586; Match(DOT);
				State = 587; isall();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public IsallContext isall() {
			return GetRuleContext<IsallContext>(0);
		}
		public ExceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterExcept(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitExcept(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptContext except() {
		ExceptContext _localctx = new ExceptContext(Context, State);
		EnterRule(_localctx, 100, RULE_except);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(T__20);
			State = 591; Match(LFBRKT);
			State = 592; data();
			State = 593; Match(RFBRKT);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 594; Match(DOT);
				State = 595; isall();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public IsallContext isall() {
			return GetRuleContext<IsallContext>(0);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 102, RULE_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(T__21);
			State = 599; Match(LFBRKT);
			State = 600; data();
			State = 601; Match(RFBRKT);
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 602; Match(DOT);
				State = 603; isall();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public DropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDrop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDrop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropContext drop() {
		DropContext _localctx = new DropContext(Context, State);
		EnterRule(_localctx, 104, RULE_drop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(T__22);
			State = 607; Match(LFBRKT);
			State = 608; fields();
			State = 609; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewcaseContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public ITerminalNode STRINGUDF() { return GetToken(AScriptParser.STRINGUDF, 0); }
		public NewcaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newcase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNewcase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNewcase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewcase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewcaseContext newcase() {
		NewcaseContext _localctx = new NewcaseContext(Context, State);
		EnterRule(_localctx, 106, RULE_newcase);
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 611; Match(WORD);
				State = 612; Match(T__23);
				State = 613; Match(TEXT);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 614; Match(WORD);
				State = 615; Match(DOT);
				State = 616; Match(STRINGUDF);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoincaseContext : ParserRuleContext {
		public ITerminalNode OPER() { return GetToken(AScriptParser.OPER, 0); }
		public NewcaseContext newcase() {
			return GetRuleContext<NewcaseContext>(0);
		}
		public JoincaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joincase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoincase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoincase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoincase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoincaseContext joincase() {
		JoincaseContext _localctx = new JoincaseContext(Context, State);
		EnterRule(_localctx, 108, RULE_joincase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 619; Match(OPER);
			State = 620; newcase();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulticaseContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public NewcaseContext newcase() {
			return GetRuleContext<NewcaseContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public JoincaseContext[] joincase() {
			return GetRuleContexts<JoincaseContext>();
		}
		public JoincaseContext joincase(int i) {
			return GetRuleContext<JoincaseContext>(i);
		}
		public MulticaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multicase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterMulticase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitMulticase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulticase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulticaseContext multicase() {
		MulticaseContext _localctx = new MulticaseContext(Context, State);
		EnterRule(_localctx, 110, RULE_multicase);
		int _la;
		try {
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 622; Match(LFBRKT);
				State = 623; newcase();
				State = 624; Match(T__5);
				State = 625; Match(TEXT);
				State = 626; Match(RFBRKT);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; Match(LFBRKT);
				State = 629; newcase();
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPER) {
					{
					{
					State = 630; joincase();
					}
					}
					State = 635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 636; Match(T__5);
				State = 637; Match(TEXT);
				State = 638; Match(RFBRKT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiwhenContext : ParserRuleContext {
		public MulticaseContext[] multicase() {
			return GetRuleContexts<MulticaseContext>();
		}
		public MulticaseContext multicase(int i) {
			return GetRuleContext<MulticaseContext>(i);
		}
		public MultiwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiwhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterMultiwhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitMultiwhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiwhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiwhenContext multiwhen() {
		MultiwhenContext _localctx = new MultiwhenContext(Context, State);
		EnterRule(_localctx, 112, RULE_multiwhen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 642; Match(T__24);
			State = 643; multicase();
			}
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 645; Match(T__5);
				{
				State = 646; Match(T__24);
				State = 647; multicase();
				}
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewcolumnContext : ParserRuleContext {
		public MultiwhenContext multiwhen() {
			return GetRuleContext<MultiwhenContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public NewcolumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newcolumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterNewcolumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitNewcolumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewcolumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewcolumnContext newcolumn() {
		NewcolumnContext _localctx = new NewcolumnContext(Context, State);
		EnterRule(_localctx, 114, RULE_newcolumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653; multiwhen();
			State = 654; Match(T__10);
			State = 655; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterContext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitContext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextContext context() {
		ContextContext _localctx = new ContextContext(Context, State);
		EnterRule(_localctx, 116, RULE_context);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConlitContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public ConlitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conlit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterConlit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitConlit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConlit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConlitContext conlit() {
		ConlitContext _localctx = new ConlitContext(Context, State);
		EnterRule(_localctx, 118, RULE_conlit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatstateContext : ParserRuleContext {
		public ConlitContext[] conlit() {
			return GetRuleContexts<ConlitContext>();
		}
		public ConlitContext conlit(int i) {
			return GetRuleContext<ConlitContext>(i);
		}
		public ConcatstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatstate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterConcatstate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitConcatstate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatstate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatstateContext concatstate() {
		ConcatstateContext _localctx = new ConcatstateContext(Context, State);
		EnterRule(_localctx, 120, RULE_concatstate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 661; conlit();
			}
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 662; Match(T__5);
				{
				State = 663; conlit();
				}
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatcolumnContext : ParserRuleContext {
		public ConcatstateContext concatstate() {
			return GetRuleContext<ConcatstateContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(AScriptParser.WORD, 0); }
		public ConcatcolumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatcolumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterConcatcolumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitConcatcolumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatcolumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatcolumnContext concatcolumn() {
		ConcatcolumnContext _localctx = new ConcatcolumnContext(Context, State);
		EnterRule(_localctx, 122, RULE_concatcolumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; concatstate();
			State = 670; Match(T__10);
			State = 671; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithcolumnContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public NewcolumnContext newcolumn() {
			return GetRuleContext<NewcolumnContext>(0);
		}
		public ConcatcolumnContext concatcolumn() {
			return GetRuleContext<ConcatcolumnContext>(0);
		}
		public WithcolumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withcolumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterWithcolumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitWithcolumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithcolumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithcolumnContext withcolumn() {
		WithcolumnContext _localctx = new WithcolumnContext(Context, State);
		EnterRule(_localctx, 124, RULE_withcolumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(T__25);
			State = 674; Match(LFBRKT);
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				{
				State = 675; newcolumn();
				}
				break;
			case TEXT:
				{
				State = 676; concatcolumn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 679; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 126, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CubeContext : ParserRuleContext {
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public AggtypeContext aggtype() {
			return GetRuleContext<AggtypeContext>(0);
		}
		public FilterconditionContext filtercondition() {
			return GetRuleContext<FilterconditionContext>(0);
		}
		public SortstatementContext sortstatement() {
			return GetRuleContext<SortstatementContext>(0);
		}
		public CubeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterCube(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitCube(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CubeContext cube() {
		CubeContext _localctx = new CubeContext(Context, State);
		EnterRule(_localctx, 128, RULE_cube);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; Match(LFBRKT);
			State = 684; fields();
			State = 685; Match(RFBRKT);
			State = 686; Match(DOT);
			State = 687; aggtype();
			State = 688; Match(LFBRKT);
			State = 689; Match(RFBRKT);
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 690; filtercondition();
				}
				break;
			}
			State = 694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 693; sortstatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollupContext : ParserRuleContext {
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public AggtypeContext aggtype() {
			return GetRuleContext<AggtypeContext>(0);
		}
		public FilterconditionContext filtercondition() {
			return GetRuleContext<FilterconditionContext>(0);
		}
		public SortstatementContext sortstatement() {
			return GetRuleContext<SortstatementContext>(0);
		}
		public RollupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterRollup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitRollup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollupContext rollup() {
		RollupContext _localctx = new RollupContext(Context, State);
		EnterRule(_localctx, 130, RULE_rollup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(LFBRKT);
			State = 697; fields();
			State = 698; Match(RFBRKT);
			State = 699; Match(DOT);
			State = 700; aggtype();
			State = 701; Match(LFBRKT);
			State = 702; Match(RFBRKT);
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 703; filtercondition();
				}
				break;
			}
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 706; sortstatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public FilterconditionContext filtercondition() {
			return GetRuleContext<FilterconditionContext>(0);
		}
		public SortstatementContext sortstatement() {
			return GetRuleContext<SortstatementContext>(0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 132, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; Match(LFBRKT);
			State = 710; fields();
			State = 711; Match(RFBRKT);
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 712; filtercondition();
				}
				break;
			}
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 715; sortstatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public ITerminalNode LBAGG() { return GetToken(AScriptParser.LBAGG, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public FilterconditionContext filtercondition() {
			return GetRuleContext<FilterconditionContext>(0);
		}
		public SortstatementContext sortstatement() {
			return GetRuleContext<SortstatementContext>(0);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterGroupby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitGroupby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 134, RULE_groupby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; Match(LFBRKT);
			State = 719; fields();
			State = 720; Match(RFBRKT);
			State = 721; Match(DOT);
			State = 722; Match(LBAGG);
			State = 723; Match(LFBRKT);
			State = 724; agg();
			State = 725; Match(RFBRKT);
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 726; filtercondition();
				}
				break;
			}
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 729; sortstatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterconditionContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public FltContext flt() {
			return GetRuleContext<FltContext>(0);
		}
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public FilterconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filtercondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterFiltercondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitFiltercondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFiltercondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterconditionContext filtercondition() {
		FilterconditionContext _localctx = new FilterconditionContext(Context, State);
		EnterRule(_localctx, 136, RULE_filtercondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(DOT);
			State = 733; flt();
			State = 734; Match(LFBRKT);
			State = 735; condition();
			State = 736; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortstatementContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(AScriptParser.DOT, 0); }
		public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public SortstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSortstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSortstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortstatementContext sortstatement() {
		SortstatementContext _localctx = new SortstatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_sortstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(DOT);
			State = 739; sort();
			State = 740; Match(LFBRKT);
			State = 741; order();
			State = 742; Match(RFBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public ITerminalNode LFBRKT() { return GetToken(AScriptParser.LFBRKT, 0); }
		public MultijoinContext multijoin() {
			return GetRuleContext<MultijoinContext>(0);
		}
		public ITerminalNode RFBRKT() { return GetToken(AScriptParser.RFBRKT, 0); }
		public ITerminalNode JOINTYPE() { return GetToken(AScriptParser.JOINTYPE, 0); }
		public JoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinContext join() {
		JoinContext _localctx = new JoinContext(Context, State);
		EnterRule(_localctx, 140, RULE_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; data();
			State = 745; Match(T__5);
			State = 746; Match(LFBRKT);
			State = 747; multijoin();
			State = 748; Match(RFBRKT);
			State = 749; Match(T__5);
			State = 750; Match(JOINTYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultijoinContext : ParserRuleContext {
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public MultijoinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multijoin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterMultijoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitMultijoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultijoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultijoinContext multijoin() {
		MultijoinContext _localctx = new MultijoinContext(Context, State);
		EnterRule(_localctx, 142, RULE_multijoin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 752; Match(LFBRKT);
			State = 753; relation();
			State = 754; Match(RFBRKT);
			}
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 756; Match(T__5);
				{
				State = 757; Match(LFBRKT);
				State = 758; relation();
				State = 759; Match(RFBRKT);
				}
				}
				}
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public JoindataContext joindata() {
			return GetRuleContext<JoindataContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(AScriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AScriptParser.DOT, i);
		}
		public JoinfieldContext joinfield() {
			return GetRuleContext<JoinfieldContext>(0);
		}
		public JoineddataContext joineddata() {
			return GetRuleContext<JoineddataContext>(0);
		}
		public JoinedfieldContext joinedfield() {
			return GetRuleContext<JoinedfieldContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 144, RULE_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766; joindata();
			State = 767; Match(DOT);
			State = 768; joinfield();
			State = 769; Match(T__26);
			State = 770; joineddata();
			State = 771; Match(DOT);
			State = 772; joinedfield();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggtypeContext : ParserRuleContext {
		public ITerminalNode AGGRE() { return GetToken(AScriptParser.AGGRE, 0); }
		public AggtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterAggtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitAggtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggtypeContext aggtype() {
		AggtypeContext _localctx = new AggtypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_aggtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774; Match(AGGRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoindataContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public JoindataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joindata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoindata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoindata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoindata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoindataContext joindata() {
		JoindataContext _localctx = new JoindataContext(Context, State);
		EnterRule(_localctx, 148, RULE_joindata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinfieldContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public JoinfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoinfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoinfield(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinfield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinfieldContext joinfield() {
		JoinfieldContext _localctx = new JoinfieldContext(Context, State);
		EnterRule(_localctx, 150, RULE_joinfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedfieldContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public JoinedfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoinedfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoinedfield(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinedfield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinedfieldContext joinedfield() {
		JoinedfieldContext _localctx = new JoinedfieldContext(Context, State);
		EnterRule(_localctx, 152, RULE_joinedfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoineddataContext : ParserRuleContext {
		public DataContext data() {
			return GetRuleContext<DataContext>(0);
		}
		public JoineddataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joineddata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterJoineddata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitJoineddata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoineddata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoineddataContext joineddata() {
		JoineddataContext _localctx = new JoineddataContext(Context, State);
		EnterRule(_localctx, 154, RULE_joineddata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode DECLARTYPE() { return GetToken(AScriptParser.DECLARTYPE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 156, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(DECLARTYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatafieldsContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(AScriptParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(AScriptParser.TEXT, i);
		}
		public ITerminalNode[] DATATYPE() { return GetTokens(AScriptParser.DATATYPE); }
		public ITerminalNode DATATYPE(int i) {
			return GetToken(AScriptParser.DATATYPE, i);
		}
		public DatafieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterDatafields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitDatafields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatafieldsContext datafields() {
		DatafieldsContext _localctx = new DatafieldsContext(Context, State);
		EnterRule(_localctx, 158, RULE_datafields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 786; Match(TEXT);
			State = 787; Match(T__0);
			State = 788; Match(DATATYPE);
			}
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 790; Match(T__5);
				{
				State = 791; Match(TEXT);
				State = 792; Match(T__0);
				State = 793; Match(DATATYPE);
				}
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		public ITerminalNode[] ORDERBY() { return GetTokens(AScriptParser.ORDERBY); }
		public ITerminalNode ORDERBY(int i) {
			return GetToken(AScriptParser.ORDERBY, i);
		}
		public ITerminalNode[] LFBRKT() { return GetTokens(AScriptParser.LFBRKT); }
		public ITerminalNode LFBRKT(int i) {
			return GetToken(AScriptParser.LFBRKT, i);
		}
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public ITerminalNode[] RFBRKT() { return GetTokens(AScriptParser.RFBRKT); }
		public ITerminalNode RFBRKT(int i) {
			return GetToken(AScriptParser.RFBRKT, i);
		}
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterOrder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitOrder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 160, RULE_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 799; Match(ORDERBY);
			State = 800; Match(LFBRKT);
			State = 801; fields();
			State = 802; Match(RFBRKT);
			}
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 804; Match(T__5);
				{
				State = 805; Match(ORDERBY);
				State = 806; Match(LFBRKT);
				State = 807; fields();
				State = 808; Match(RFBRKT);
				}
				}
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AScriptParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AScriptParser.WORD, i);
		}
		public ITerminalNode[] CONDITIONOPERATOR() { return GetTokens(AScriptParser.CONDITIONOPERATOR); }
		public ITerminalNode CONDITIONOPERATOR(int i) {
			return GetToken(AScriptParser.CONDITIONOPERATOR, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(AScriptParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(AScriptParser.TEXT, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 162, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 815; Match(WORD);
			State = 816; Match(CONDITIONOPERATOR);
			State = 817; Match(TEXT);
			}
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 819; Match(T__5);
				{
				State = 820; Match(WORD);
				State = 821; Match(CONDITIONOPERATOR);
				State = 822; Match(TEXT);
				}
				}
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode[] WORD() { return GetTokens(AScriptParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(AScriptParser.WORD, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(AScriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(AScriptParser.DOT, i);
		}
		public ITerminalNode[] AGGRE() { return GetTokens(AScriptParser.AGGRE); }
		public ITerminalNode AGGRE(int i) {
			return GetToken(AScriptParser.AGGRE, i);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 164, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 828; Match(WORD);
			State = 829; Match(DOT);
			State = 830; Match(AGGRE);
			}
			State = 838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 832; Match(T__5);
				{
				State = 833; Match(WORD);
				State = 834; Match(DOT);
				State = 835; Match(AGGRE);
				}
				}
				}
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectsortContext : ParserRuleContext {
		public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public SelectsortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectsort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSelectsort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSelectsort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectsort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectsortContext selectsort() {
		SelectsortContext _localctx = new SelectsortContext(Context, State);
		EnterRule(_localctx, 166, RULE_selectsort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 841; order();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitvalueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(AScriptParser.INT, 0); }
		public LimitvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterLimitvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitLimitvalue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitvalueContext limitvalue() {
		LimitvalueContext _localctx = new LimitvalueContext(Context, State);
		EnterRule(_localctx, 168, RULE_limitvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 170, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemanameContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(AScriptParser.TEXT, 0); }
		public SchemanameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.EnterSchemaname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAScriptListener typedListener = listener as IAScriptListener;
			if (typedListener != null) typedListener.ExitSchemaname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAScriptVisitor<TResult> typedVisitor = visitor as IAScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemanameContext schemaname() {
		SchemanameContext _localctx = new SchemanameContext(Context, State);
		EnterRule(_localctx, 172, RULE_schemaname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x354', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x3', '\x2', '\a', '\x2', '\xB2', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xB5', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x168', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x17B', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x17E', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x1CE', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x1F0', '\n', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x20B', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', 
		'\x210', '\n', '$', '\f', '$', '\xE', '$', '\x213', '\v', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x24F', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x257', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x25F', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x26C', '\n', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\a', '\x39', '\x27A', '\n', '\x39', '\f', '\x39', '\xE', '\x39', 
		'\x27D', '\v', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x283', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', '\x28B', '\n', 
		':', '\f', ':', '\xE', ':', '\x28E', '\v', ':', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x29B', '\n', '>', '\f', 
		'>', '\xE', '>', '\x29E', '\v', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', 
		'\x2A8', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x2B6', '\n', 
		'\x42', '\x3', '\x42', '\x5', '\x42', '\x2B9', '\n', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x2C3', '\n', '\x43', '\x3', 
		'\x43', '\x5', '\x43', '\x2C6', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x2CC', '\n', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x2CF', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2DA', '\n', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x2DD', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x2FC', '\n', 
		'I', '\f', 'I', '\xE', 'I', '\x2FF', '\v', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', 
		'\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\x31D', '\n', 'Q', '\f', 'Q', '\xE', 
		'Q', '\x320', '\v', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\a', 'R', '\x32D', '\n', 'R', '\f', 'R', '\xE', 'R', '\x330', 
		'\v', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 'S', '\x33A', '\n', 'S', '\f', 
		'S', '\xE', 'S', '\x33D', '\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\a', 'T', 
		'\x347', '\n', 'T', '\f', 'T', '\xE', 'T', '\x34A', '\v', 'T', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x2', '\x2', 'Y', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\x2', '\x2', '\x2', '\x33C', 
		'\x2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4', '\x167', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x169', '\x3', '\x2', '\x2', '\x2', '\b', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x16F', '\x3', '\x2', '\x2', '\x2', '\xE', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x173', '\x3', '\x2', '\x2', '\x2', '\x12', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x181', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x196', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x198', '\x3', '\x2', '\x2', '\x2', '\"', '\x19C', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x19E', '\x3', '\x2', '\x2', '\x2', '&', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1A8', '\x3', '\x2', '\x2', '\x2', ',', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1BE', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x1C3', '\x3', '\x2', '\x2', '\x2', ':', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1DE', '\x3', '\x2', '\x2', '\x2', '@', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x44', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x214', '\x3', '\x2', '\x2', '\x2', 'J', '\x216', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x218', '\x3', '\x2', '\x2', '\x2', 'N', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x21E', '\x3', '\x2', '\x2', '\x2', 'T', '\x222', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x227', '\x3', '\x2', '\x2', '\x2', 'X', '\x229', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x238', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x23D', '\x3', '\x2', '\x2', '\x2', '^', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x241', '\x3', '\x2', '\x2', '\x2', '\x62', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x250', '\x3', '\x2', '\x2', '\x2', 'h', '\x258', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x260', '\x3', '\x2', '\x2', '\x2', 'l', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x282', '\x3', '\x2', '\x2', '\x2', 'r', '\x284', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x28F', '\x3', '\x2', '\x2', '\x2', 'v', '\x293', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x297', '\x3', '\x2', '\x2', '\x2', '|', '\x29F', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x86', '\x2C7', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2F2', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x300', '\x3', '\x2', '\x2', '\x2', '\x94', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x310', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x312', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x321', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x331', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x33E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x34F', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x351', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB2', '\x5', '\x4', '\x3', '\x2', '\xB1', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x6', '\x4', '\x2', 
		'\xB7', '\xB8', '\a', '\x3', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x1E', 
		'\x10', '\x2', '\xB9', '\xBA', '\a', ';', '\x2', '\x2', '\xBA', '\xBB', 
		'\x5', 'H', '%', '\x2', '\xBB', '\xBC', '\x5', '\x86', '\x44', '\x2', 
		'\xBC', '\xBD', '\a', '\x4', '\x2', '\x2', '\xBD', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\x5', '\x6', '\x4', '\x2', '\xBF', '\xC0', 
		'\a', '\x3', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x1E', '\x10', '\x2', 
		'\xC1', '\xC2', '\a', ';', '\x2', '\x2', '\xC2', '\xC3', '\x5', 'J', '&', 
		'\x2', '\xC3', '\xC4', '\x5', '\x88', '\x45', '\x2', '\xC4', '\xC5', '\a', 
		'\x4', '\x2', '\x2', '\xC5', '\x168', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x5', '\x6', '\x4', '\x2', '\xC7', '\xC8', '\a', '\x3', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', '\x1E', '\x10', '\x2', '\xC9', '\xCA', '\a', 
		';', '\x2', '\x2', '\xCA', '\xCB', '\a', '&', '\x2', '\x2', '\xCB', '\xCC', 
		'\a', '\x39', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\x8E', 'H', '\x2', 
		'\xCD', '\xCE', '\a', ':', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x4', 
		'\x2', '\x2', '\xCF', '\x168', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x5', '\x6', '\x4', '\x2', '\xD1', '\xD2', '\a', '\x3', '\x2', '\x2', 
		'\xD2', '\xD3', '\x5', '\x1E', '\x10', '\x2', '\xD3', '\xD4', '\a', ';', 
		'\x2', '\x2', '\xD4', '\xD5', '\a', '\"', '\x2', '\x2', '\xD5', '\xD6', 
		'\x5', '\x82', '\x42', '\x2', '\xD6', '\xD7', '\a', '\x4', '\x2', '\x2', 
		'\xD7', '\x168', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x6', 
		'\x4', '\x2', '\xD9', '\xDA', '\a', '\x3', '\x2', '\x2', '\xDA', '\xDB', 
		'\x5', '\x1E', '\x10', '\x2', '\xDB', '\xDC', '\a', ';', '\x2', '\x2', 
		'\xDC', '\xDD', '\a', '#', '\x2', '\x2', '\xDD', '\xDE', '\x5', '\x84', 
		'\x43', '\x2', '\xDE', '\xDF', '\a', '\x4', '\x2', '\x2', '\xDF', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '\x6', '\x4', '\x2', 
		'\xE1', '\xE2', '\a', '\x3', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\x1E', 
		'\x10', '\x2', '\xE3', '\xE4', '\a', ';', '\x2', '\x2', '\xE4', '\xE5', 
		'\x5', '^', '\x30', '\x2', '\xE5', '\xE6', '\a', '\x4', '\x2', '\x2', 
		'\xE6', '\x168', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x6', 
		'\x4', '\x2', '\xE8', '\xE9', '\a', '\x3', '\x2', '\x2', '\xE9', '\xEA', 
		'\x5', '\x1E', '\x10', '\x2', '\xEA', '\xEB', '\a', ';', '\x2', '\x2', 
		'\xEB', '\xEC', '\x5', '\x62', '\x32', '\x2', '\xEC', '\xED', '\a', '\x4', 
		'\x2', '\x2', '\xED', '\x168', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\x5', '\x6', '\x4', '\x2', '\xEF', '\xF0', '\a', '\x3', '\x2', '\x2', 
		'\xF0', '\xF1', '\x5', '\x1E', '\x10', '\x2', '\xF1', '\xF2', '\a', ';', 
		'\x2', '\x2', '\xF2', '\xF3', '\x5', 'h', '\x35', '\x2', '\xF3', '\xF4', 
		'\a', '\x4', '\x2', '\x2', '\xF4', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x5', '\x6', '\x4', '\x2', '\xF6', '\xF7', '\a', '\x3', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '\x1E', '\x10', '\x2', '\xF8', '\xF9', 
		'\a', ';', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\x64', '\x33', '\x2', 
		'\xFA', '\xFB', '\a', '\x4', '\x2', '\x2', '\xFB', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xFD', '\x5', '\x6', '\x4', '\x2', '\xFD', '\xFE', 
		'\a', '\x3', '\x2', '\x2', '\xFE', '\xFF', '\x5', '\x1E', '\x10', '\x2', 
		'\xFF', '\x100', '\a', ';', '\x2', '\x2', '\x100', '\x101', '\x5', '\x66', 
		'\x34', '\x2', '\x101', '\x102', '\a', '\x4', '\x2', '\x2', '\x102', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '\x6', '\x4', '\x2', 
		'\x104', '\x105', '\a', '\x3', '\x2', '\x2', '\x105', '\x106', '\x5', 
		'\x1E', '\x10', '\x2', '\x106', '\x107', '\a', ';', '\x2', '\x2', '\x107', 
		'\x108', '\x5', 'j', '\x36', '\x2', '\x108', '\x109', '\a', '\x4', '\x2', 
		'\x2', '\x109', '\x168', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x5', '\x6', '\x4', '\x2', '\x10B', '\x10C', '\a', '\x3', '\x2', '\x2', 
		'\x10C', '\x10D', '\x5', '\x1E', '\x10', '\x2', '\x10D', '\x10E', '\a', 
		';', '\x2', '\x2', '\x10E', '\x10F', '\x5', '~', '@', '\x2', '\x10F', 
		'\x110', '\a', '\x4', '\x2', '\x2', '\x110', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x5', '\x6', '\x4', '\x2', '\x112', '\x113', 
		'\a', '\x3', '\x2', '\x2', '\x113', '\x114', '\x5', 'X', '-', '\x2', '\x114', 
		'\x115', '\a', '\x4', '\x2', '\x2', '\x115', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x5', '\x6', '\x4', '\x2', '\x117', '\x118', 
		'\a', '\x3', '\x2', '\x2', '\x118', '\x119', '\x5', '\x1E', '\x10', '\x2', 
		'\x119', '\x11A', '\x5', '\x8A', '\x46', '\x2', '\x11A', '\x11B', '\a', 
		'\x4', '\x2', '\x2', '\x11B', '\x168', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\x5', '\x6', '\x4', '\x2', '\x11D', '\x11E', '\a', '\x3', '\x2', 
		'\x2', '\x11E', '\x11F', '\x5', '\x1E', '\x10', '\x2', '\x11F', '\x120', 
		'\x5', '\x8C', 'G', '\x2', '\x120', '\x121', '\a', '\x4', '\x2', '\x2', 
		'\x121', '\x168', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x5', 
		'\x6', '\x4', '\x2', '\x123', '\x124', '\a', '\x3', '\x2', '\x2', '\x124', 
		'\x125', '\x5', '\x1E', '\x10', '\x2', '\x125', '\x126', '\a', ';', '\x2', 
		'\x2', '\x126', '\x127', '\x5', 'Z', '.', '\x2', '\x127', '\x128', '\a', 
		'\x4', '\x2', '\x2', '\x128', '\x168', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x5', '\x6', '\x4', '\x2', '\x12A', '\x12B', '\a', '\x3', '\x2', 
		'\x2', '\x12B', '\x12C', '\x5', '\x1E', '\x10', '\x2', '\x12C', '\x12D', 
		'\a', ';', '\x2', '\x2', '\x12D', '\x12E', '\x5', '\x18', '\r', '\x2', 
		'\x12E', '\x12F', '\a', '\x4', '\x2', '\x2', '\x12F', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x131', '\x5', '\x6', '\x4', '\x2', '\x131', 
		'\x132', '\a', '\x3', '\x2', '\x2', '\x132', '\x133', '\x5', '\x1E', '\x10', 
		'\x2', '\x133', '\x134', '\a', ';', '\x2', '\x2', '\x134', '\x135', '\x5', 
		'\x1A', '\xE', '\x2', '\x135', '\x136', '\a', '\x4', '\x2', '\x2', '\x136', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x5', '\x6', '\x4', 
		'\x2', '\x138', '\x139', '\a', '\x3', '\x2', '\x2', '\x139', '\x13A', 
		'\x5', '\x1E', '\x10', '\x2', '\x13A', '\x13B', '\a', ';', '\x2', '\x2', 
		'\x13B', '\x13C', '\x5', '\x1C', '\xF', '\x2', '\x13C', '\x13D', '\a', 
		'\x4', '\x2', '\x2', '\x13D', '\x168', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\x5', '\x9E', 'P', '\x2', '\x13F', '\x140', '\a', '\x3', '\x2', 
		'\x2', '\x140', '\x141', '\x5', '\x6', '\x4', '\x2', '\x141', '\x142', 
		'\a', '\x3', '\x2', '\x2', '\x142', '\x143', '\x5', 'R', '*', '\x2', '\x143', 
		'\x144', '\a', '\x4', '\x2', '\x2', '\x144', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\x5', '\x9E', 'P', '\x2', '\x146', '\x147', 
		'\a', '\x3', '\x2', '\x2', '\x147', '\x148', '\x5', '\x6', '\x4', '\x2', 
		'\x148', '\x149', '\a', '\x3', '\x2', '\x2', '\x149', '\x14A', '\a', '@', 
		'\x2', '\x2', '\x14A', '\x14B', '\a', '\x4', '\x2', '\x2', '\x14B', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x5', '\x9E', 'P', '\x2', 
		'\x14D', '\x14E', '\a', '\x3', '\x2', '\x2', '\x14E', '\x14F', '\x5', 
		'\x6', '\x4', '\x2', '\x14F', '\x150', '\a', '\x3', '\x2', '\x2', '\x150', 
		'\x151', '\x5', 'T', '+', '\x2', '\x151', '\x152', '\a', '\x4', '\x2', 
		'\x2', '\x152', '\x168', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x5', '\xE', '\b', '\x2', '\x154', '\x155', '\a', '\x3', '\x2', '\x2', 
		'\x155', '\x156', '\x5', '\x80', '\x41', '\x2', '\x156', '\x157', '\a', 
		'\x4', '\x2', '\x2', '\x157', '\x168', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x159', '\x5', '\x10', '\t', '\x2', '\x159', '\x15A', '\a', '\x3', '\x2', 
		'\x2', '\x15A', '\x15B', '\a', '@', '\x2', '\x2', '\x15B', '\x15C', '\a', 
		'\x4', '\x2', '\x2', '\x15C', '\x168', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\x5', '\x12', '\n', '\x2', '\x15E', '\x15F', '\a', '\x3', '\x2', 
		'\x2', '\x15F', '\x160', '\x5', 'R', '*', '\x2', '\x160', '\x161', '\a', 
		'\x4', '\x2', '\x2', '\x161', '\x168', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x163', '\x5', '\x16', '\f', '\x2', '\x163', '\x164', '\a', '\x3', '\x2', 
		'\x2', '\x164', '\x165', '\x5', '\x14', '\v', '\x2', '\x165', '\x166', 
		'\a', '\x4', '\x2', '\x2', '\x166', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x167', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x167', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x167', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x167', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x103', '\x3', '\x2', '\x2', '\x2', '\x167', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x111', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x167', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x122', '\x3', '\x2', '\x2', '\x2', '\x167', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x137', '\x3', '\x2', '\x2', '\x2', '\x167', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x145', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x167', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x158', '\x3', '\x2', '\x2', '\x2', '\x167', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x5', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\a', '\x36', 
		'\x2', '\x2', '\x16A', '\a', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\a', '\x36', '\x2', '\x2', '\x16C', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\a', '@', '\x2', '\x2', '\x16E', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x16F', '\x170', '\a', '@', '\x2', '\x2', '\x170', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x5', '\x2', '\x2', 
		'\x172', '\xF', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\x6', 
		'\x2', '\x2', '\x174', '\x11', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\a', '\a', '\x2', '\x2', '\x176', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x17C', '\a', '@', '\x2', '\x2', '\x178', '\x179', '\a', '\b', 
		'\x2', '\x2', '\x179', '\x17B', '\a', '@', '\x2', '\x2', '\x17A', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '\t', '\x2', 
		'\x2', '\x180', '\x17', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\a', '\n', '\x2', '\x2', '\x182', '\x183', '\a', '\x39', '\x2', '\x2', 
		'\x183', '\x184', '\x5', '\b', '\x5', '\x2', '\x184', '\x185', '\a', '\b', 
		'\x2', '\x2', '\x185', '\x186', '\x5', '\n', '\x6', '\x2', '\x186', '\x187', 
		'\a', ':', '\x2', '\x2', '\x187', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\a', '\v', '\x2', '\x2', '\x189', '\x18A', '\a', '\x39', 
		'\x2', '\x2', '\x18A', '\x18B', '\x5', '\b', '\x5', '\x2', '\x18B', '\x18C', 
		'\a', '\b', '\x2', '\x2', '\x18C', '\x18D', '\x5', '\n', '\x6', '\x2', 
		'\x18D', '\x18E', '\a', '\b', '\x2', '\x2', '\x18E', '\x18F', '\x5', '\f', 
		'\a', '\x2', '\x18F', '\x190', '\a', ':', '\x2', '\x2', '\x190', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\a', '\f', '\x2', '\x2', 
		'\x192', '\x193', '\a', '\x39', '\x2', '\x2', '\x193', '\x194', '\a', 
		'@', '\x2', '\x2', '\x194', '\x195', '\a', ':', '\x2', '\x2', '\x195', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\a', '\x36', '\x2', 
		'\x2', '\x197', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', 
		'\a', '\x36', '\x2', '\x2', '\x199', '\x19A', '\a', '\b', '\x2', '\x2', 
		'\x19A', '\x19B', '\a', '\x34', '\x2', '\x2', '\x19B', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x19C', '\x19D', '\a', '\x36', '\x2', '\x2', '\x19D', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x5', ' ', '\x11', '\x2', 
		'\x19F', '%', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\a', '\x36', 
		'\x2', '\x2', '\x1A1', '\x1A2', '\a', '\b', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x5', '\"', '\x12', '\x2', '\x1A3', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\a', '\x36', '\x2', '\x2', '\x1A5', '\x1A6', '\a', 
		'\b', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\x34', '\x2', '\x2', '\x1A7', 
		')', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '\x36', '\x2', 
		'\x2', '\x1A9', '\x1AA', '\a', '\b', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', 
		'\"', '\x12', '\x2', '\x1AB', '+', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '\x36', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '\b', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\a', '\x31', '\x2', '\x2', '\x1AF', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x36', '\x2', '\x2', '\x1B1', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x36', '\x2', 
		'\x2', '\x1B3', '\x1B4', '\a', '\b', '\x2', '\x2', '\x1B4', '\x1B5', '\a', 
		'@', '\x2', '\x2', '\x1B5', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\a', '\x36', '\x2', '\x2', '\x1B7', '\x1B8', '\a', '\b', '\x2', 
		'\x2', '\x1B8', '\x1B9', '\a', '@', '\x2', '\x2', '\x1B9', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '\x36', '\x2', '\x2', '\x1BB', 
		'\x1BC', '\a', '\b', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', '.', '\x18', 
		'\x2', '\x1BD', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', ')', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '\x39', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\a', '\x36', '\x2', '\x2', '\x1C1', '\x1C2', '\a', 
		':', '\x2', '\x2', '\x1C2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\a', '*', '\x2', '\x2', '\x1C4', '\x1CD', '\a', '\x39', '\x2', 
		'\x2', '\x1C5', '\x1CE', '\x5', '(', '\x15', '\x2', '\x1C6', '\x1CE', 
		'\x5', '$', '\x13', '\x2', '\x1C7', '\x1CE', '\x5', '*', '\x16', '\x2', 
		'\x1C8', '\x1CE', '\x5', '&', '\x14', '\x2', '\x1C9', '\x1CE', '\x5', 
		',', '\x17', '\x2', '\x1CA', '\x1CE', '\x5', '\x34', '\x1B', '\x2', '\x1CB', 
		'\x1CE', '\x5', '\x30', '\x19', '\x2', '\x1CC', '\x1CE', '\x5', '\x32', 
		'\x1A', '\x2', '\x1CD', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CC', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1D0', '\a', ':', '\x2', '\x2', '\x1D0', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\a', '+', '\x2', '\x2', '\x1D2', '\x1D3', '\a', 
		'\x39', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '\x36', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\a', ':', '\x2', '\x2', '\x1D5', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\a', '+', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x39', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\a', '@', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\b', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '\x36', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\a', 
		':', '\x2', '\x2', '\x1DD', '=', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1DF', '\a', ',', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x39', '\x2', 
		'\x2', '\x1E0', '\x1E1', '\a', '\x36', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\a', ':', '\x2', '\x2', '\x1E2', '?', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E4', '\a', ',', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '\x39', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\a', '\x36', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\a', '\b', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x34', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', 
		':', '\x2', '\x2', '\x1EA', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1F0', '\a', '\x36', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x36', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\a', '\r', '\x2', '\x2', '\x1EE', '\x1F0', '\a', 
		'\x36', '\x2', '\x2', '\x1EF', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x20B', '\x5', '\x42', '\"', '\x2', '\x1F2', '\x1F3', 
		'\x5', '\x36', '\x1C', '\x2', '\x1F3', '\x1F4', '\a', '\r', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\a', '\x36', '\x2', '\x2', '\x1F5', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x5', '\x38', '\x1D', '\x2', '\x1F7', 
		'\x1F8', '\a', '\r', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\x36', '\x2', 
		'\x2', '\x1F9', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\x5', ':', '\x1E', '\x2', '\x1FB', '\x1FC', '\a', '\r', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\a', '\x36', '\x2', '\x2', '\x1FD', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', '<', '\x1F', '\x2', '\x1FF', 
		'\x200', '\a', '\r', '\x2', '\x2', '\x200', '\x201', '\a', '\x36', '\x2', 
		'\x2', '\x201', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', 
		'\x5', '>', ' ', '\x2', '\x203', '\x204', '\a', '\r', '\x2', '\x2', '\x204', 
		'\x205', '\a', '\x36', '\x2', '\x2', '\x205', '\x20B', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x207', '\x5', '@', '!', '\x2', '\x207', '\x208', '\a', 
		'\r', '\x2', '\x2', '\x208', '\x209', '\a', '\x36', '\x2', '\x2', '\x209', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x1F1', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x206', '\x3', '\x2', '\x2', '\x2', '\x20B', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x211', '\x5', '\x44', '#', 
		'\x2', '\x20D', '\x20E', '\a', '\b', '\x2', '\x2', '\x20E', '\x210', '\x5', 
		'\x44', '#', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x215', '\a', ' ', '\x2', '\x2', '\x215', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x217', '\a', '!', '\x2', '\x2', '\x217', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x218', '\x219', '\a', '?', '\x2', '\x2', '\x219', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\a', '\x36', '\x2', '\x2', 
		'\x21B', 'O', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\a', '$', 
		'\x2', '\x2', '\x21D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', 
		'\a', '\xE', '\x2', '\x2', '\x21F', '\x220', '\a', '\x36', '\x2', '\x2', 
		'\x220', '\x221', '\a', '\xE', '\x2', '\x2', '\x221', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x223', '\a', '\xF', '\x2', '\x2', '\x223', '\x224', 
		'\a', '\x39', '\x2', '\x2', '\x224', '\x225', '\x5', 'V', ',', '\x2', 
		'\x225', '\x226', '\a', ':', '\x2', '\x2', '\x226', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x227', '\x228', '\a', '@', '\x2', '\x2', '\x228', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\a', '\x10', '\x2', '\x2', 
		'\x22A', '\x22B', '\a', '\x39', '\x2', '\x2', '\x22B', '\x22C', '\x5', 
		'\x80', '\x41', '\x2', '\x22C', '\x22D', '\a', ':', '\x2', '\x2', '\x22D', 
		'\x22E', '\a', ';', '\x2', '\x2', '\x22E', '\x22F', '\x5', '\xAC', 'W', 
		'\x2', '\x22F', '\x230', '\a', '\x39', '\x2', '\x2', '\x230', '\x231', 
		'\x5', '\xAE', 'X', '\x2', '\x231', '\x232', '\a', ':', '\x2', '\x2', 
		'\x232', '\x233', '\a', ';', '\x2', '\x2', '\x233', '\x234', '\a', '\x11', 
		'\x2', '\x2', '\x234', '\x235', '\a', '\x39', '\x2', '\x2', '\x235', '\x236', 
		'\x5', '\xA0', 'Q', '\x2', '\x236', '\x237', '\a', ':', '\x2', '\x2', 
		'\x237', 'Y', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', '\x12', 
		'\x2', '\x2', '\x239', '\x23A', '\a', '\x39', '\x2', '\x2', '\x23A', '\x23B', 
		'\x5', '\x80', '\x41', '\x2', '\x23B', '\x23C', '\a', ':', '\x2', '\x2', 
		'\x23C', '[', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '%', 
		'\x2', '\x2', '\x23E', ']', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', 
		'\a', '\x13', '\x2', '\x2', '\x240', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x241', '\x242', '\a', '\x14', '\x2', '\x2', '\x242', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x244', '\a', '\x15', '\x2', '\x2', '\x244', 
		'\x245', '\a', '\x39', '\x2', '\x2', '\x245', '\x246', '\x5', '\xAA', 
		'V', '\x2', '\x246', '\x247', '\a', ':', '\x2', '\x2', '\x247', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', '\x16', '\x2', '\x2', 
		'\x249', '\x24A', '\a', '\x39', '\x2', '\x2', '\x24A', '\x24B', '\x5', 
		'\x1E', '\x10', '\x2', '\x24B', '\x24E', '\a', ':', '\x2', '\x2', '\x24C', 
		'\x24D', '\a', ';', '\x2', '\x2', '\x24D', '\x24F', '\x5', '`', '\x31', 
		'\x2', '\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x251', '\a', '\x17', '\x2', '\x2', '\x251', '\x252', '\a', 
		'\x39', '\x2', '\x2', '\x252', '\x253', '\x5', '\x1E', '\x10', '\x2', 
		'\x253', '\x256', '\a', ':', '\x2', '\x2', '\x254', '\x255', '\a', ';', 
		'\x2', '\x2', '\x255', '\x257', '\x5', '`', '\x31', '\x2', '\x256', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x257', 'g', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\a', '\x18', 
		'\x2', '\x2', '\x259', '\x25A', '\a', '\x39', '\x2', '\x2', '\x25A', '\x25B', 
		'\x5', '\x1E', '\x10', '\x2', '\x25B', '\x25E', '\a', ':', '\x2', '\x2', 
		'\x25C', '\x25D', '\a', ';', '\x2', '\x2', '\x25D', '\x25F', '\x5', '`', 
		'\x31', '\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25E', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x260', '\x261', '\a', '\x19', '\x2', '\x2', '\x261', '\x262', 
		'\a', '\x39', '\x2', '\x2', '\x262', '\x263', '\x5', '\x46', '$', '\x2', 
		'\x263', '\x264', '\a', ':', '\x2', '\x2', '\x264', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x265', '\x266', '\a', '\x36', '\x2', '\x2', '\x266', '\x267', 
		'\a', '\x1A', '\x2', '\x2', '\x267', '\x26C', '\a', '@', '\x2', '\x2', 
		'\x268', '\x269', '\a', '\x36', '\x2', '\x2', '\x269', '\x26A', '\a', 
		';', '\x2', '\x2', '\x26A', '\x26C', '\a', '+', '\x2', '\x2', '\x26B', 
		'\x265', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', 'm', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', 
		'\x32', '\x2', '\x2', '\x26E', '\x26F', '\x5', 'l', '\x37', '\x2', '\x26F', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\a', '\x39', '\x2', 
		'\x2', '\x271', '\x272', '\x5', 'l', '\x37', '\x2', '\x272', '\x273', 
		'\a', '\b', '\x2', '\x2', '\x273', '\x274', '\a', '@', '\x2', '\x2', '\x274', 
		'\x275', '\a', ':', '\x2', '\x2', '\x275', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x276', '\x277', '\a', '\x39', '\x2', '\x2', '\x277', '\x27B', 
		'\x5', 'l', '\x37', '\x2', '\x278', '\x27A', '\x5', 'n', '\x38', '\x2', 
		'\x279', '\x278', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', 
		'\x2', '\x2', '\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27E', '\x3', '\x2', '\x2', 
		'\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', 
		'\a', '\b', '\x2', '\x2', '\x27F', '\x280', '\a', '@', '\x2', '\x2', '\x280', 
		'\x281', '\a', ':', '\x2', '\x2', '\x281', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x282', '\x270', '\x3', '\x2', '\x2', '\x2', '\x282', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x283', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x285', '\a', '\x1B', '\x2', '\x2', '\x285', '\x286', '\x5', 
		'p', '\x39', '\x2', '\x286', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x288', '\a', '\b', '\x2', '\x2', '\x288', '\x289', '\a', '\x1B', '\x2', 
		'\x2', '\x289', '\x28B', '\x5', 'p', '\x39', '\x2', '\x28A', '\x287', 
		'\x3', '\x2', '\x2', '\x2', '\x28B', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x28D', 's', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x28C', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', '\x5', 'r', ':', 
		'\x2', '\x290', '\x291', '\a', '\r', '\x2', '\x2', '\x291', '\x292', '\a', 
		'\x36', '\x2', '\x2', '\x292', 'u', '\x3', '\x2', '\x2', '\x2', '\x293', 
		'\x294', '\a', '@', '\x2', '\x2', '\x294', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x295', '\x296', '\a', '@', '\x2', '\x2', '\x296', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x297', '\x29C', '\x5', 'x', '=', '\x2', '\x298', '\x299', 
		'\a', '\b', '\x2', '\x2', '\x299', '\x29B', '\x5', 'x', '=', '\x2', '\x29A', 
		'\x298', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\x5', 
		'z', '>', '\x2', '\x2A0', '\x2A1', '\a', '\r', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\a', '\x36', '\x2', '\x2', '\x2A2', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\a', '\x1C', '\x2', '\x2', '\x2A4', '\x2A7', 
		'\a', '\x39', '\x2', '\x2', '\x2A5', '\x2A8', '\x5', 't', ';', '\x2', 
		'\x2A6', '\x2A8', '\x5', '|', '?', '\x2', '\x2A7', '\x2A5', '\x3', '\x2', 
		'\x2', '\x2', '\x2A7', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\a', ':', '\x2', '\x2', 
		'\x2AA', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\a', '@', 
		'\x2', '\x2', '\x2AC', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', 
		'\a', '\x39', '\x2', '\x2', '\x2AE', '\x2AF', '\x5', '\x46', '$', '\x2', 
		'\x2AF', '\x2B0', '\a', ':', '\x2', '\x2', '\x2B0', '\x2B1', '\a', ';', 
		'\x2', '\x2', '\x2B1', '\x2B2', '\x5', '\x94', 'K', '\x2', '\x2B2', '\x2B3', 
		'\a', '\x39', '\x2', '\x2', '\x2B3', '\x2B5', '\a', ':', '\x2', '\x2', 
		'\x2B4', '\x2B6', '\x5', '\x8A', '\x46', '\x2', '\x2B5', '\x2B4', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B9', '\x5', '\x8C', 
		'G', '\x2', '\x2B8', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BB', '\a', '\x39', '\x2', '\x2', '\x2BB', '\x2BC', '\x5', 
		'\x46', '$', '\x2', '\x2BC', '\x2BD', '\a', ':', '\x2', '\x2', '\x2BD', 
		'\x2BE', '\a', ';', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', '\x94', 'K', 
		'\x2', '\x2BF', '\x2C0', '\a', '\x39', '\x2', '\x2', '\x2C0', '\x2C2', 
		'\a', ':', '\x2', '\x2', '\x2C1', '\x2C3', '\x5', '\x8A', '\x46', '\x2', 
		'\x2C2', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x2C6', '\x5', '\x8C', 'G', '\x2', '\x2C5', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\a', '\x39', '\x2', '\x2', 
		'\x2C8', '\x2C9', '\x5', '\x46', '$', '\x2', '\x2C9', '\x2CB', '\a', ':', 
		'\x2', '\x2', '\x2CA', '\x2CC', '\x5', '\x8A', '\x46', '\x2', '\x2CB', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CC', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', 
		'\x5', '\x8C', 'G', '\x2', '\x2CE', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\a', '\x39', '\x2', '\x2', '\x2D1', 
		'\x2D2', '\x5', '\x46', '$', '\x2', '\x2D2', '\x2D3', '\a', ':', '\x2', 
		'\x2', '\x2D3', '\x2D4', '\a', ';', '\x2', '\x2', '\x2D4', '\x2D5', '\a', 
		'\x1F', '\x2', '\x2', '\x2D5', '\x2D6', '\a', '\x39', '\x2', '\x2', '\x2D6', 
		'\x2D7', '\x5', '\xA6', 'T', '\x2', '\x2D7', '\x2D9', '\a', ':', '\x2', 
		'\x2', '\x2D8', '\x2DA', '\x5', '\x8A', '\x46', '\x2', '\x2D9', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DD', '\x5', 
		'\x8C', 'G', '\x2', '\x2DC', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x2DF', '\a', ';', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', 
		'P', ')', '\x2', '\x2E0', '\x2E1', '\a', '\x39', '\x2', '\x2', '\x2E1', 
		'\x2E2', '\x5', '\xA4', 'S', '\x2', '\x2E2', '\x2E3', '\a', ':', '\x2', 
		'\x2', '\x2E3', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', 
		'\a', ';', '\x2', '\x2', '\x2E5', '\x2E6', '\x5', '\\', '/', '\x2', '\x2E6', 
		'\x2E7', '\a', '\x39', '\x2', '\x2', '\x2E7', '\x2E8', '\x5', '\xA2', 
		'R', '\x2', '\x2E8', '\x2E9', '\a', ':', '\x2', '\x2', '\x2E9', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', '\x5', '\x1E', '\x10', '\x2', 
		'\x2EB', '\x2EC', '\a', '\b', '\x2', '\x2', '\x2EC', '\x2ED', '\a', '\x39', 
		'\x2', '\x2', '\x2ED', '\x2EE', '\x5', '\x90', 'I', '\x2', '\x2EE', '\x2EF', 
		'\a', ':', '\x2', '\x2', '\x2EF', '\x2F0', '\a', '\b', '\x2', '\x2', '\x2F0', 
		'\x2F1', '\a', '-', '\x2', '\x2', '\x2F1', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x2F2', '\x2F3', '\a', '\x39', '\x2', '\x2', '\x2F3', '\x2F4', 
		'\x5', '\x92', 'J', '\x2', '\x2F4', '\x2F5', '\a', ':', '\x2', '\x2', 
		'\x2F5', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\a', 
		'\b', '\x2', '\x2', '\x2F7', '\x2F8', '\a', '\x39', '\x2', '\x2', '\x2F8', 
		'\x2F9', '\x5', '\x92', 'J', '\x2', '\x2F9', '\x2FA', '\a', ':', '\x2', 
		'\x2', '\x2FA', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2F6', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\x3', 
		'\x2', '\x2', '\x2', '\x2FE', '\x91', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x2FD', '\x3', '\x2', '\x2', '\x2', '\x300', '\x301', '\x5', '\x96', 
		'L', '\x2', '\x301', '\x302', '\a', ';', '\x2', '\x2', '\x302', '\x303', 
		'\x5', '\x98', 'M', '\x2', '\x303', '\x304', '\a', '\x1D', '\x2', '\x2', 
		'\x304', '\x305', '\x5', '\x9C', 'O', '\x2', '\x305', '\x306', '\a', ';', 
		'\x2', '\x2', '\x306', '\x307', '\x5', '\x9A', 'N', '\x2', '\x307', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\a', '/', '\x2', '\x2', 
		'\x309', '\x95', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30B', '\x5', 
		'\x1E', '\x10', '\x2', '\x30B', '\x97', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30D', '\x5', '\x1E', '\x10', '\x2', '\x30D', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x30E', '\x30F', '\x5', '\x1E', '\x10', '\x2', '\x30F', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\x5', '\x1E', '\x10', 
		'\x2', '\x311', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', 
		'\a', '.', '\x2', '\x2', '\x313', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x314', '\x315', '\a', '@', '\x2', '\x2', '\x315', '\x316', '\a', '\x3', 
		'\x2', '\x2', '\x316', '\x317', '\a', '\x30', '\x2', '\x2', '\x317', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\a', '\b', '\x2', '\x2', 
		'\x319', '\x31A', '\a', '@', '\x2', '\x2', '\x31A', '\x31B', '\a', '\x3', 
		'\x2', '\x2', '\x31B', '\x31D', '\a', '\x30', '\x2', '\x2', '\x31C', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x31D', '\x320', '\x3', '\x2', '\x2', '\x2', 
		'\x31E', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x31E', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\a', '\'', '\x2', 
		'\x2', '\x322', '\x323', '\a', '\x39', '\x2', '\x2', '\x323', '\x324', 
		'\x5', '\x46', '$', '\x2', '\x324', '\x325', '\a', ':', '\x2', '\x2', 
		'\x325', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x326', '\x327', '\a', 
		'\b', '\x2', '\x2', '\x327', '\x328', '\a', '\'', '\x2', '\x2', '\x328', 
		'\x329', '\a', '\x39', '\x2', '\x2', '\x329', '\x32A', '\x5', '\x46', 
		'$', '\x2', '\x32A', '\x32B', '\a', ':', '\x2', '\x2', '\x32B', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', '\x32C', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x32D', '\x330', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32C', '\x3', 
		'\x2', '\x2', '\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32F', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x330', '\x32E', '\x3', '\x2', '\x2', 
		'\x2', '\x331', '\x332', '\a', '\x36', '\x2', '\x2', '\x332', '\x333', 
		'\a', '(', '\x2', '\x2', '\x333', '\x334', '\a', '@', '\x2', '\x2', '\x334', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\a', '\b', '\x2', 
		'\x2', '\x336', '\x337', '\a', '\x36', '\x2', '\x2', '\x337', '\x338', 
		'\a', '(', '\x2', '\x2', '\x338', '\x33A', '\a', '@', '\x2', '\x2', '\x339', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33D', '\x3', '\x2', '\x2', 
		'\x2', '\x33B', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\a', 
		'\x36', '\x2', '\x2', '\x33F', '\x340', '\a', ';', '\x2', '\x2', '\x340', 
		'\x341', '\a', '/', '\x2', '\x2', '\x341', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x342', '\x343', '\a', '\b', '\x2', '\x2', '\x343', '\x344', '\a', 
		'\x36', '\x2', '\x2', '\x344', '\x345', '\a', ';', '\x2', '\x2', '\x345', 
		'\x347', '\a', '/', '\x2', '\x2', '\x346', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x347', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x348', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', 
		'\x349', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x348', '\x3', 
		'\x2', '\x2', '\x2', '\x34B', '\x34C', '\x5', '\xA2', 'R', '\x2', '\x34C', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\a', '\x34', '\x2', 
		'\x2', '\x34E', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x350', 
		'\a', '\x1E', '\x2', '\x2', '\x350', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x351', '\x352', '\a', '@', '\x2', '\x2', '\x352', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\xB3', '\x167', '\x17C', '\x1CD', '\x1EF', '\x20A', 
		'\x211', '\x24E', '\x256', '\x25E', '\x26B', '\x27B', '\x282', '\x28C', 
		'\x29C', '\x2A7', '\x2B5', '\x2B8', '\x2C2', '\x2C5', '\x2CB', '\x2CE', 
		'\x2D9', '\x2DC', '\x2FD', '\x31E', '\x32E', '\x33B', '\x348',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
